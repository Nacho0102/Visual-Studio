@using PagedList.Mvc
@model OLI2016MVC.Models.ViewModel.VmMaterialesList
@{
    ViewBag.Title = "List";
}


<div class="container">
    <div class="row">
        <div class="col-md-6">
            <h4>Árbol de Nodos</h4>
                      
        </div>

        <div class="col-md-6">
            <div id="materiales-buscador" class="buscador">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <!-- Formulario --->
                        <form id="form-materiales">
                            @using (Html.BeginForm("List", "Materiales", FormMethod.Post, new { @class = "form-horizontal", @id = "formulario" }))
                            {
                                <fieldset>

                                    <!-- Form Name -->
                                    <legend class="text-center" style="font:bold">BUSCADOR DE MATERIALES</legend>
                                    <!-- Nombre-->
                                    <div class="form-group">
                                        @Html.Label("Nombre", new { @class = "col-md-4 control-label" })
                                        <div class="input-group sizeForm col-md-4'">
                                            @Html.TextBoxFor(n => n.nombre, new { @class = "form-control input-md",@id= "nombre", @name = "nombre" })
                                            <input id="idMaterial" name="idMaterial" type="hidden" value="" />
                                        </div>
                                    </div>


                                    <!-- Descripción-->
                                    <div class="form-group">
                                        @Html.Label("Descripción", new { @class = "col-md-4 control-label" })
                                        <div class="input-group sizeForm col-md-4'">
                                            @Html.TextBoxFor(d => d.descripcion, new { @class = "form-control input-md" ,@id="descripcion",@name = "descripcion" })
                                        </div>
                                    </div>

                                    <!-- Nivel escolar -->
                                    <div class="form-group">
                                        @Html.Label("Nivel Escolar", new { @class = "col-md-4 control-label" })
                                        <div class="input-group sizeForm col-md-4'">
                                            @Html.DropDownListFor(n => n.idNivelEscolar, new SelectList(Model.listaNivelesEscolares, "idNivelEscolar", "nombre"), "--Selecciona--", new { @class = "form-control" , @id="idNivelEscolar",@name= "nivelEscolar" })
                                        </div>
                                    </div>




                                    <!-- Fecha de creación(desde)-->
                                    <div class="form-group">
                                        @Html.Label("Fecha de Creación(min)", new { @class = "col-md-4 control-label"})
                                        <div class='input-group date datetimepicker1 sizeForm col-md-4'>
                                            <input data-msg-required="Seleccione fecha de creación mínima"
                                                   type='text' class="form-control sizeFormInput datePick focusInput"
                                                   placeholder="Inicio (dd/mm/aaaa)"
                                                   name="Materiales_fechaCreacion_desde"
                                                   id="Materiales_fechaCreacion_desde"
                                                  />
                                            <span class="input-group-addon sizeFormInput datePick">
                                                <span class="glyphicon glyphicon-calendar"></span>
                                            </span>
                                        </div>
                                    </div>

                                    <!-- Fecha de creación(hasta)-->
                                    <div class="form-group">
                                        @Html.Label("Fecha de Creación(max)", new { @class = "col-md-4 control-label" })
                                        <div class='input-group date datetimepicker1 sizeForm col-md-4'>
                                            <input data-msg-required="Seleccione fecha de creación máxima"
                                                   type='text' class="form-control sizeFormInput datePick focusInput"
                                                   placeholder="Inicio (dd/mm/aaaa)"
                                                   name="Materiales_fechaCreacion_hasta"
                                                   id="Materiales_fechaCreacion_hasta"
                                                    />
                                            <span class="input-group-addon sizeFormInput datePick">
                                                <span class="glyphicon glyphicon-calendar"></span>
                                            </span>
                                        </div>
                                    </div>

                                    <!-- Fecha de modificación(desde)-->
                                    <div class="form-group">
                                        @Html.Label("Fecha de Modificación(min)", new { @class = "col-md-4 control-label" })
                                        <div class='input-group date datetimepicker1 sizeForm col-md-4'>
                                            <input data-msg-required="Seleccione fecha de modificación mínima"
                                                   type='text' class="form-control sizeFormInput datePick focusInput"
                                                   placeholder="Inicio (dd/mm/aaaa)"
                                                   name="Materiales_fechaModificacion_desde"
                                                   id="Materiales_fechaModificacion_desde"
                                                   />
                                            <span class="input-group-addon sizeFormInput datePick">
                                                <span class="glyphicon glyphicon-calendar"></span>
                                            </span>
                                        </div>
                                    </div>

                                    <!-- Fecha de modificación(hasta)-->
                                    <div class="form-group">
                                        @Html.Label("Fecha de Modificación(max)", new { @class = "col-md-4 control-label" })
                                        <div class='input-group date datetimepicker1 sizeForm col-md-4'>
                                            <input data-msg-required="Seleccione fecha de modificación máxima"
                                                   type='text' class="form-control sizeFormInput datePick focusInput"
                                                   placeholder="Inicio (dd/mm/aaaa)"
                                                   name="Materiales_fechaModificacion_hasta"
                                                   id="Materiales_fechaModificacion_hasta"
                                                    />
                                            <span class="input-group-addon sizeFormInput datePick">
                                                <span class="glyphicon glyphicon-calendar"></span>
                                            </span>
                                        </div>
                                    </div>

                                    <!-- Autor Creación-->
                                    <div class="form-group">
                                        <!-- Obtenemos la lista previamente llena en el view model -->
                                        @Html.Label("Autor Creación", new { @class = "col-md-4 control-label" })
                                        <div class="input-group sizeForm col-md-4'">
                                            @Html.DropDownListFor(m => m.u_id, new SelectList(Model.listaPerfilesUsuarios, "Id", "NombreCompleto"), "--Selecciona--", new { @class = "form-control",@id= "u_id", @name= "u_id" })
                                        </div>
                                    </div>

                                    <!-- Autor Modificación-->
                                    <div class="form-group">
                                        <!-- Obtenemos la lista previamente llena en el view model -->
                                        @Html.Label("Autor Modificación", new { @class = "col-md-4 control-label" })
                                        <div class="input-group sizeForm col-md-4'">
                                            @Html.DropDownListFor(m => m.u_id, new SelectList(Model.listaPerfilesUsuarios, "Id", "NombreCompleto"), "--Selecciona--", new { @class = "form-control",@id= "u_id_mod", @name = "u_id_mod" })
                                        </div>
                                    </div>

                                    <!-- Estado-->

                                    <div class="form-group">
                                        <label class="col-md-4 control-label" for="DdlEstado">Estado:</label>
                                        <div class="input-group sizeForm col-md-4'">
                                            @Html.EnumDropDownListFor(e => e.estado, "Seleccione estado", new {  @class = "form-control", @id = "idEstado", @name = "idEstado" })

                                        </div>
                                    </div>


                                    <!-- Tipo Material-->

                                    <div class="form-group">
                                        <label class="col-md-4 control-label" for="DdlTipo">Tipo Material:</label>
                                        <div class="input-group sizeForm col-md-4'">
                                            @Html.EnumDropDownListFor(tm => tm.tipoMaterial, "Seleccione tipo material", new {  @class = "form-control",@id = " idTipoMaterial", @name = " idTipoMaterial" })
                                        </div>
                                    </div>


                                    <div class="form-group; col-md-12 text-center" style="padding-top: 1%">
                                        @*@*Input oculto primeraVez*@
                                        @*<input type="hidden" value="1" name="primeraVez" />*@

                                        <input type="submit" value="Buscar" id="ButBuscarMaterial" class="btn btn-primary" style="text-align:center" />
                                        <div class="well resultados" id="resultados" hidden></div>
                                    </div>




                                </fieldset>
                            }

                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@*<!-- Resultados por pagina -->
                        <div class="col-md-12 col-xs-12" style="padding-top:5%">
                            <div class="row col-md-4 col-xs-4 col-md-offset-4 col-xs-offset-4">

                                <!-- Obtenemos una lista donde estan prefijados los resultados a mostrar por pagina-->
                                @Html.Label("Resultados por página")
                                @Html.DropDownListFor(m => m.pageSize, Model.listaResultadosPagina)

                                @if (Model.resultadosTotales > 0)
                                {
                                    <div>
                                        <!-- Muestra los resultados encontrados en resultados de la búsqueda-->
                                        <span>Resultados encontrados: @Model.resultadosTotales</span>
                                    </div>
                                }
                            </div>
                        </div>



                        if (Model != null)
                        {
                        if (Model.listaMateriales != null)
                        {
                        if (Model.resultadosTotales == 0)
                        {
                        <h4 class="danger danger col-md-4 col-md-offset-4">No existen resultados</h4>
                        }
                        else
                        {
                        <h4 class="alert alert-info col-md-4 col-md-offset-4">
                            Resultados de la búsqueda
                        </h4>
                        <!--Muestra los resultados de busqueda-->
                        <div>
                            @Html.Partial("_TablaMaterialesList")
                        </div>
                        }
                        }
                        }



                    </div>
                </div>
            </div>
        </div>
    </div>*@



@section SeccionScripts{

    <script>

        var idmateriales_chequeados = [];
        var nombre_materiales = [];



        //función que muestra los detalles en una ventana modal inyectándolos mediante ajax en formato html
        var Detalles = function () {
            $modal = $('#myModal');
            var id = this.id;

            $modal.modal('show');
            $.ajax({
                // la URL para la petición
                url: '/Materiales/Details?idMaterial=' + id,
                // especifica si será una petición POST o GET
                type: 'GET',
                // el tipo de información que se espera de respuesta
                dataType: 'html'
            })
                // código a ejecutar si la petición es satisfactoria;
                .done(function (respuesta) {
                    $("#cuerpoModal").html(respuesta);

                })
                // código a ejecutar si la petición falla;
                .fail(function (xhr, status) {
                    alert('Disculpe, existió un problema');
                })
        };




        //desmarcar checkbox general al desmarcar un checkbox de la lista
        var controlCheckGeneral = function (claseCheckBox, nombreCheckBoxGeneral) {

            if (!$(claseCheckBox).prop("checked")) {
                $(nombreCheckBoxGeneral).prop("checked", false);
            }
            else {
                var totalCheckBoxCheck = 0;
                $(claseCheckBox).each(function () {
                    if ($(this).prop('checked')) {
                        totalCheckBoxCheck++;

                    }

                });

                $(nombreCheckBoxGeneral).prop("checked", totalCheckBoxCheck == $(claseCheckBox).length);

            }
        }

        //control de elementos marcados o no para asociar/desasociar
        var controlChecks = function (chequeados, objactual, nombresChequeados) {
            var valor = objactual.val();
            var posi = chequeados.indexOf(valor);
            if (objactual.prop("checked")) {
                if (posi == -1) {
                    chequeados.push(valor);
                    //nombresChequeados.push($("tr[data-id='" + valor + "'] td:first-child").html());
                }
                else {
                    chequeados.splice(posi, 1);
                    //nombresChequeados.splice(posi, 1);
                }
            }
            else {
                if (posi != -1) {
                    chequeados.splice(posi, 1);
                    //nombresChequeados.splice(posi, 1);
                }
            }
        }

        //verificar cada checkbox
        var verificarChequeados = function (chequeados, claseChequeados, nombresChequeados) {
            claseChequeados.each(function () {
                var valor = $(this).attr("value");
                if (claseChequeados.prop("checked")) {

                    if (chequeados.length != 0) {

                        var posi = chequeados.indexOf(valor);
                        if (posi == -1) {
                            chequeados.push(valor);
                            //nombresChequeados.push($("tr[data-id='" + valor + "'] td:first-child").html());
                        }
                    }
                    else {

                        chequeados.push(valor);
                        //nombresChequeados.push($("tr[data-id='" + valor + "'] td:first-child").html());
                    }


                }
                else {
                    var posi = chequeados.indexOf(valor);
                    chequeados.splice(posi, 1);
                    //nombresChequeados.splice(posi, 1);
                }
            });
        }

        @*//funcion para actualizar en base al evento change de la lista de numeros de resultados por página
        var Actualizar = function () {
            var valorPageSize = $("#pageSize").val();
            var concat1 = "/Materiales/List?nombre=" + '@Model.nombre' + "&" + "idNivelEscolar=" + '@Model.idNivelEscolar' + "&" + "TipoMaterial=" + '@Model.tipoMaterial'
                    + "&" + "fechaCreacionInicio=" + '@Model.Materiales_fechaCreacion_desde' + "&fechaCreacionFin=" + '@Model.Materiales_fechaCreacion_hasta'
                    + "&" + "fechaModificacionInicio=";

            var concat2 = '@Model.Materiales_fechaModificacion_desde' + "&" + "fechaModificacionFin=" + '@Model.Materiales_fechaModificacion_hasta'
            + "&" + "u_id=" + '@Model.u_id' + "&" + "u_id_mod=" + '@Model.u_id_mod' + "&" + "primeraVez=1" + "&PageSize=" + valorPageSize;
            var getURL = concat1 + concat2;
            window.location.href = getURL;
        }*@

        //Funcion para inicializar
        $(document).ready(function () {
            var buscador = $(".buscador");
            var formMateriales = $("#form-materiales");
            var resultadosBusqueda = $("#resultados");

            formMateriales.on("submit", function (event) {
                event.preventDefault();
                event.stopPropagation();
                
                $.get("/Materiales/_TablaMaterialesList?"+formMateriales.serialize(), function (data) {
                    resultadosBusqueda.attr("hidden", false);
                    resultadosBusqueda.slideDown();
                    resultadosBusqueda.html(data);
                });
            });

            //Acción de marcar/desmarcar el checkbox general

            buscador.on("change", "#chkBoxGeneral", function () {
                $(".chkBoxSelec").prop("checked", $("#chkBoxGeneral").prop("checked"));
                verificarChequeados(idmateriales_chequeados, $(".chkBoxSelec"), nombre_materiales);
                //activaDesactivaAsociarCampo(cursos_chequeados, $("#asociarCampo_C"));

            });
            //control de cada checkbox
            buscador.on("change", ".chkBoxSelec", function () {
                controlCheckGeneral(".chkBoxSelec", "#chkBoxGeneral");
                controlChecks(idmateriales_chequeados, $(this), nombre_materiales);
                //activaDesactivaAsociarCampo(alumnos_chequeados, $("#asociarCampo_A"));

            });

            
            //$(".detalles").on("click", Detalles);
            //$("#pageSize").on("change", Actualizar);

        });

    </script>
}
